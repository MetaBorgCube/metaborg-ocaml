module expressions

imports lex 
imports names 
imports type-expressions 

imports patterns 
imports type-definitions 
imports module-expressions 

imports module-types 
imports exception-definitions 
imports classes

imports aux 

// 7.7  Expressions
// *=*=*=*=*=*=*=*=

imports expressions-basic
imports expressions-operators
imports expressions-control
imports expressions-data-structures
imports expressions-objects
imports expressions-other
imports expressions-coercions

// 7.7.1  Precedence and associativity
// ========================

  //> {Argument.Arg Argument.LabeledArg Argument.OptArg}

sorts Expr
context-free priorities
  Expr.Prefix
  > {Expr.Proj Expr.Proj1 Expr.Proj2}
  > {left: Expr.BinOp6 Expr.Invoke} // #
  > Argument+ = Argument+ Argument
  > {non-assoc: Expr.App Expr.ConApp Expr.Lazy Expr.Assert}
  > {Expr.Min Expr.MinF}
  > Expr.BinOp5 // **
  > Expr.BinOp4 // *
  > Expr.BinOp3 // +-
  > Expr.Cns    // ::
  > Expr.BinOp2 // @^
  > Expr.BinOp1 // =<>
  > {right: Expr.And Expr.AndD}
  > {right: Expr.Or  Expr.OrD}
  > {Expr ","}+ = {Expr ","}+ "," Expr
  > {right: Expr.InstAssign Expr.BinOp0 
            Expr.ProjAssign Expr.Proj1Assign Expr.Proj2Assign} // := <-
  > Expr.IfE
  > Expr.IfT  
  > Expr.Seq
  > Expr.Let 
  > Expr.LetRec 
  > Expr.Match 
  > {Expr.Fun Expr.FunTyped Expr.Function Expr.Try}
  
context-free priorities
  {non-nested: Argument.Arg Expr.Lazy Expr.Assert}
   
context-free priorities
  // TODO: check ambiguity between argument and constructor app
  Expr.App            <0> .> {Expr.Lazy Expr.Assert Expr.Const}, 
  Argument.Arg        <0> .> {Expr.App Expr.ConApp Expr.Tuple},   
  Argument.LabeledArg <1> .> {Expr.ConApp Expr.Lazy Expr.Assert},
  Argument.OptArg     <1> .> {Expr.ConApp Expr.Lazy Expr.Assert},
  Expr.Lazy           <0> .> {Expr.ConApp}

context-free priorities

  Argument.Arg <0> .> {Expr.Min Expr.MinF}
  
context-free priorities 

  {Expr ";"}+ = Expr                 <0> .> Expr.Seq,
  {Expr ";"}+ = {Expr ";"}+ ";" Expr <0> .> Expr.Seq

 

  

  
  