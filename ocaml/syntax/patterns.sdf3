module patterns

imports lex names type-expressions constants aux

// 7.6  Patterns
// *=*=*=*=*=*=*

sorts Pattern
context-free syntax
  Pattern            = "(" Pattern ")" {bracket}
  Pattern.VarPat     = ValueName
  Pattern.WldPat     = "_"
  Pattern.ConstPat   = Constant
  Pattern.AliasPat   = Pattern "as" ValueName
  Pattern.AscrPat    = "(" Pattern ":" Typexpr ")"
  Pattern.OrPat      = Pattern "|" Pattern {left}
  Pattern.ConstrPat  = Constr Pattern
  Pattern.PolyPat    = TagNameQ Pattern
  Pattern.TConstrPat = "#" Typeconstr
  Pattern.TuplePat   = {Pattern ","}+
  Pattern.ListPat    = "[" {Pattern ";"}+ OptSemicolon "]" 
  Pattern.ConsPat    = Pattern "::" Pattern
  Pattern.ArrayPat   = "[|" {Pattern ";"}+ OptSemicolon "|]"
  Pattern.RangePat   = CharLiteral ".." CharLiteral
  Pattern.LazyPat    = "lazy" Pattern
  Pattern.ExcPat     = "exception" Pattern
   
context-free syntax // record patterns

  Pattern.RecPat         = "{" {FieldPat ";"}+             "}"
  Pattern.RecPatSugar    = "{" {FieldPat ";"}+ ";"         "}"
  Pattern.RecPatWld      = "{" {FieldPat ";"}+ ";" "_"     "}"
  Pattern.RecPatWldSugar = "{" {FieldPat ";"}+ ";" "_" ";" "}"
                       
  FieldPat.FieldPat      = Field ":" Typexpr "=" Pattern 
  FieldPat.FieldPatInit  = Field             "=" Pattern
  FieldPat.FieldPatTyped = Field ":" Typexpr
  FieldPat.FieldPat      = Field  
  
  Field = "_" {reject}
  
context-free syntax // local open patterns

  Pattern.LocalOpenPat      = ModulePath "." "(" Pattern ")"
  Pattern.LocalOpenPatList  = ModulePath "." "[" Pattern "]"
  Pattern.LocalOpenPatArray = ModulePath "." "[|" Pattern "|]"
  Pattern.LocalOpenPatRec   = ModulePath "." "{" Pattern "}"
  
context-free priorities 
  Pattern.RangePat
  > Pattern.LazyPat
  > {Pattern.ConstrPat Pattern.PolyPat}
  > {Pattern ","}+ = Pattern 
  > {Pattern ","}+ = {Pattern ","}+ "," Pattern
  > Pattern.TuplePat 
  > Pattern.OrPat
  > Pattern.AliasPat,
  
  Pattern.TuplePat <0> .> {Pattern ","}+ = Pattern
  
  // TODO: more concise formulation of these rules (non-assoc?)

  
// See also the following language extensions: first-class modules, attributes
// and extension nodes.
// The table below shows the relative precedences and associativity of operators
// and non-closed pattern constructions. The constructions with higher precedences
// come first.

// Variable patterns
// -----------------
// 
// A pattern that consists in a value name matches any value, binding the name
// to the value. The pattern _ also matches any value, but does not bind any name.
// Patterns are linear: a variable cannot be bound several times by a given
// pattern. In particular, there is no way to test for equality between two parts
// of a data structure using only a pattern (but when guards can be used for this
// purpose).
// 
// 
// Constant patterns
// -----------------
// 
// A pattern consisting in a constant matches the values that are equal to this
// constant.
// 
// 
// Alias patterns
// --------------
// 
// The pattern pattern_1 as  value-name matches the same values as pattern_1. If
// the matching against pattern_1 is successful, the name value-name is bound to
// the matched value, in addition to the bindings performed by the matching
// against pattern_1.
// 
// 
// Parenthesized patterns
// ----------------------
// 
// The pattern ( pattern_1 ) matches the same values as pattern_1. A type
// constraint can appear in a parenthesized pattern, as in ( pattern_1 :  typexpr
// ). This constraint forces the type of pattern_1 to be compatible with typexpr.
// 
// 
// Or patterns
// -----------------
// 
// The pattern pattern_1 |  pattern_2 represents the logical or  of the two
// patterns pattern_1 and pattern_2. A value matches pattern_1 |  pattern_2 if it
// matches pattern_1 or pattern_2. The two sub-patterns pattern_1 and pattern_2
// must bind exactly the same identifiers to values having the same types.
// Matching is performed from left to right. More precisely, in case some value v
// matches pattern_1 |  pattern_2, the bindings performed are those of pattern_1
// when v matches pattern_1. Otherwise, value v matches pattern_2 whose bindings
// are performed.
// 
// 
// Variant patterns
// ----------------
// 
// The pattern constr (  pattern_1 , ... ,  pattern_n ) matches all variants
// whose constructor is equal to constr, and whose arguments match pattern_1 ...
// pattern_n. It is a type error if n is not the number of arguments expected by
// the constructor.
// The pattern constr _ matches all variants whose constructor is constr.
// The pattern pattern_1 ::  pattern_2 matches non-empty lists whose heads match
// pattern_1, and whose tails match pattern_2.
// The pattern [ pattern_1 ; ... ;  pattern_n ] matches lists of length n whose
// elements match pattern_1 ...pattern_n, respectively. This pattern behaves like
// pattern_1 :: ... ::  pattern_n :: [].
// 
// 
// Polymorphic variant patterns
// ----------------------------
// 
// The pattern `tag-name  pattern_1 matches all polymorphic variants whose tag
// is equal to tag-name, and whose argument matches pattern_1.
// 
// 
// Polymorphic variant abbreviation patterns
// -----------------------------------------
// 
// If the type [('a,'b,...)] typeconstr = [ ` tag-name_1  typexpr_1 | ... |
// ` tag-name_n  typexpr_n] is defined, then the pattern #typeconstr is a
// shorthand for the following or-pattern: ( `tag-name_1(_ :  typexpr_1) | ... |
// ` tag-name_n(_ :  typexpr_n)). It matches all values of type [< typeconstr ].
// 
// 
// Tuple patterns
// --------------
// 
// The pattern pattern_1 , ... ,  pattern_n matches n-tuples whose components
// match the patterns pattern_1 through pattern_n. That is, the pattern matches
// the tuple values (v_1, ..., v_n) such that pattern_i matches v_i for i = 1,...
// , n.
// 
// 
// Record patterns
// ---------------
// 
// The pattern { field_1  [= pattern_1] ; ... ;  field_n  [= pattern_n] }
// matches records that define at least the fields field_1 through field_n, and
// such that the value associated to field_i matches the pattern pattern_i, for i
// = 1,... , n. A single identifier field_k stands for field_k =  field_k , and a
// single qualified identifier module-path .  field_k stands for module-path .
// field_k =  field_k . The record value can define more fields than field_1
// ...field_n; the values associated to these extra fields are not taken into
// account for matching. Optionally, a record pattern can be terminated by ; _ to
// convey the fact that not all fields of the record type are listed in the record
// pattern and that it is intentional. Optional type constraints can be added
// field by field with { field_1 :  typexpr_1 =  pattern_1 ;... ; field_n :
// typexpr_n =  pattern_n } to force the type of field_k to be compatible with
// typexpr_k.
// 
// 
// Array patterns
// --------------
// 
// The pattern [| pattern_1 ; ... ;  pattern_n |] matches arrays of length n
// such that the i-th array element matches the pattern pattern_i, for i = 1,... ,
// n.
// 
// 
// Range patterns
// --------------
// 
// The pattern ' c ' .. ' d ' is a shorthand for the pattern
// ' c ' | ' c_1 ' | ' c_2 ' | ... | ' c_n ' | ' d '
// where c_1, c_2, ..., c_n are the characters that occur between c and d in
// the ASCII character set. For instance, the pattern '0'..'9' matches all
// characters that are digits.
// 
// 
// Lazy patterns
// -------------
// 
// 
// (Introduced in Objective Caml 3.11)
// pattern ::=  ...
// 
// The pattern lazy pattern matches a value v of type Lazy.t, provided pattern
// matches the result of forcing v with Lazy.force. A successful match of a
// pattern containing lazy sub-patterns forces the corresponding parts of the
// value being matched, even those that imply no test such as lazy value-name or
// lazy _. Matching a value with a pattern-matching where some patterns contain
// lazy sub-patterns may imply forcing parts of the value, even when the pattern
// selected in the end has no lazy sub-pattern.
// For more information, see the description of module Lazy in the standard
// library (module Lazy).
// 
// 
// Exception patterns
// ------------------
// (Introduced in OCaml 4.02)
// A new form of exception pattern,  exception pattern , is allowed only as a
// toplevel pattern or inside a toplevel or-pattern under a match...with
// pattern-matching (other occurrences are rejected by the type-checker).
// Cases with such a toplevel pattern are called exception cases, as
// opposed to regular value cases. Exception cases are applied when the
// evaluation of the matched expression raises an exception. The exception value
// is then matched against all the exception cases and re-raised if none of them
// accept the exception (as with a try...with block). Since the bodies of all
// exception and value cases are outside the scope of the exception handler, they
// are all considered to be in tail-position: if the match...with block itself is
// in tail position in the current function, any function call in tail position in
// one of the case bodies results in an actual tail call.
// A pattern match must contain at least one value case. It is an error if all
// cases are exceptions, because there would be no code to handle the return of a
// value.
// 
// 
// Local opens for patterns
// ------------------------
// (Introduced in OCaml 4.04)
// For patterns, local opens are limited to the module-path.( pattern)
// construction. This construction locally opens the module referred to by the
// module path module-path in the scope of the pattern pattern.
// When the body of a local open pattern is delimited by [ ], [| |], or { }, the
// parentheses can be omitted. For example, module-path.[ pattern] is equivalent
// to module-path.([ pattern]), and module-path.[|  pattern |] is equivalent to
// module-path.([|  pattern |]).

