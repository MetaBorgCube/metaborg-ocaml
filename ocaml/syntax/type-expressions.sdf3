module type-expressions 

imports lex names aux

// 7.4  Type expressions
// *=*=*=*=*=*=*=*=*=*=*

sorts Typexpr TypeVar
lexical syntax // TODO: check that this composition is lexical
  TypeVar = "'" Ident
  
context-free syntax
  Typexpr             = "(" Typexpr ")" {bracket}
  
  Typexpr.TypeVar     = TypeVar
  Typexpr.TypeAnon    = "_"
  
  Typexpr.TypeFun     = Typexpr "->" Typexpr {right}
  Typexpr.TypeFunL    = Optlabel Typexpr "->" Typexpr {right}
  
  //Typexpr.TypeTup     = Typexpr "*" {Typexpr "*"}+ {non-assoc} 
  Typexpr.TypeTup     = {Typexpr "*"}+ {non-assoc} // Note combination with prio
  
  Typexpr             = Typeconstr
  Typexpr.TypeApp     = Typexpr Typeconstr {non-assoc}
  Typexpr.TypeAppN    = "(" {Typexpr ","}+ ")" Typeconstr
  
  Typexpr.TypeAlias   = Typexpr "as" TypeVar
  
  Typexpr             = PolymorphicVariantType
  
sorts MethodType PolyTypexpr // object types
context-free syntax 
  Typexpr.ObjTypeMt    = "<" ">"
  Typexpr.ObjTypeMtRow = "<" ".." ">"
  Typexpr.ObjType      = "<" {MethodType ";"}+ OptSemicolon ">"
  Typexpr.ObjTypeRow   = "<" {MethodType ";"}+ ";" ".." ">"
  
  MethodType.MethodType = MethodName ":" PolyTypexpr
  
  PolyTypexpr.PolyTypexpr  = Typexpr
  PolyTypexpr.PolyTypexprN = TypeVar+ "." Typexpr
  
context-free syntax // # types

  Typexpr.HashType  =                        "#" ClassPath
  Typexpr.HashType1 =                Typexpr "#" ClassPath
  Typexpr.HashTypeN = "(" {Typexpr ","}+ ")" "#" ClassPath
  
context-free priorities

  {Typexpr.TypeApp Typexpr.TypeAppN}
  >  {Typexpr.HashType Typexpr.HashType1 Typexpr.HashTypeN}
  > Typexpr.TypeTup
  > {right: Typexpr.TypeFun Typexpr.TypeFunL}
  > Typexpr.TypeAlias,
  
  Typexpr.TypeTup  <0> .> Typexpr.TypeTup,  
  Typexpr.TypeAppN <1> .> {Typexpr ","}+ = Typexpr,  
  Typexpr.TypeTup  <0> .> {Typexpr "*"}+ = Typexpr

  
// See also the following language extensions: first-class modules, attributes
// and extension nodes.
// The table below shows the relative precedences and associativity of operators
// and non-closed type constructions. The constructions with higher precedences
// come first.


// Type expressions denote types in definitions of data types as well as in type
// constraints over patterns and expressions.


// Type variables
// --------------
// 
// The type expression ' ident stands for the type variable named ident. The
// type expression _ stands for either an anonymous type variable or anonymous
// type parameters. In data type definitions, type variables are names for the
// data type parameters. In type constraints, they represent unspecified types
// that can be instantiated by any type to satisfy the type constraint. In general
// the scope of a named type variable is the whole top-level phrase where it
// appears, and it can only be generalized when leaving this scope. Anonymous
// variables have no such restriction. In the following cases, the scope of named
// type variables is restricted to the type expression where they appear: 1) for
// universal (explicitly polymorphic) type variables; 2) for type variables that
// only appear in public method specifications (as those variables will be made
// universal, as described in section 7.9.1); 3) for variables used as aliases,
// when the type they are aliased to would be invalid in the scope of the
// enclosing definition (i.e. when it contains free universal type variables, or
// locally defined types.)
// 
// 
// Parenthesized types
// -------------------
// 
// The type expression ( typexpr ) denotes the same type as typexpr.
// 
// 
// Function types
// --------------
// 
// The type expression typexpr_1 ->  typexpr_2 denotes the type of functions
// mapping arguments of type typexpr_1 to results of type typexpr_2.
// label-name :  typexpr_1 ->  typexpr_2 denotes the same function type, but the
// argument is labeled label.
// ? label-name :  typexpr_1 ->  typexpr_2 denotes the type of functions mapping
// an optional labeled argument of type typexpr_1 to results of type typexpr_2.
// That is, the physical type of the function will be typexpr_1 option ->
// typexpr_2.
// 
// 
// Tuple types
// -----------
// 
// The type expression typexpr_1 * ... *  typexpr_n denotes the type of tuples
// whose elements belong to types typexpr_1, ...  typexpr_n respectively.
// 
// 
// Constructed types
// -----------------
// 
// Type constructors with no parameter, as in typeconstr, are type expressions.
// The type expression typexpr  typeconstr, where typeconstr is a type
// constructor with one parameter, denotes the application of the unary type
// constructor typeconstr to the type typexpr.
// The type expression (typexpr_1,..., typexpr_n)  typeconstr, where typeconstr
// is a type constructor with n parameters, denotes the application of the n-ary
// type constructor typeconstr to the types typexpr_1 through typexpr_n.
// In the type expression  _ typeconstr , the anonymous type expression  _
// stands in for anonymous type parameters and is equivalent to  (_, ...,_)  with
// as many repetitions of _ as the arity of typeconstr.
// 
// 
// Aliased and recursive types
// ---------------------------
// 
// 
// The type expression typexpr as '  ident denotes the same type as typexpr, and
// also binds the type variable ident to type typexpr both in typexpr and in other
// types. In general the scope of an alias is the same as for a named type
// variable, and covers the whole enclosing definition. If the type variable ident
// actually occurs in typexpr, a recursive type is created. Recursive types for
// which there exists a recursive path that does not contain an object or
// polymorphic variant type constructor are rejected, except when the -rectypes
// mode is selected.
// If ' ident denotes an explicit polymorphic variable, and typexpr denotes
// either an object or polymorphic variant type, the row variable of typexpr is
// captured by ' ident, and quantified upon.
// 
// 
// Polymorphic variant types
// -------------------------

// TODO: improve constructor names

sorts PolymorphicVariantType TagSpecFirst TagSpec TagSpecFull
context-free syntax
//  PolymorphicVariantType.PolyVarExact  = "["  TagSpecFirst ("|" TagSpec)* "]"
  
  PolymorphicVariantType.PolyVarExact   = "["  {TagSpec "|"}+                          "]" // TODO: check refactoring
  PolymorphicVariantType.PolyVarOpen    = "[>" {TagSpec "|"}*                          "]"
  PolymorphicVariantType.PolyVarClosed1 = "[<" BarOpt {TagSpecFull "|"}+               "]"
  PolymorphicVariantType.PolyVarClosed2 = "[<" BarOpt {TagSpecFull "|"}+ ">" TagNameQ+ "]"
 
//  TagSpecFirst.TagSpecFirst6 = TagNameQ 
//  TagSpecFirst.TagSpecFirst6 = TagNameQ "of" Typexpr
//  TagSpecFirst.TagSpecFirst7 =               Typexpr? "|" TagSpec

  TagSpec.TagSpec4 = TagNameQ 
  TagSpec.TagSpec6 = TagNameQ "of" Typexpr
  TagSpec.TagSpec5 =               Typexpr

  TagSpecFull.TagSpecFull4 = TagNameQ 
  TagSpecFull.TagSpecFull6 = TagNameQ "of" AmpersandOpt {Typexpr "&"}+
  TagSpecFull.TagSpecFull5 = Typexpr
  
lexical syntax
  AmpersandOpt = "&"?
  BarOpt = "|"?
  
// Polymorphic variant types describe the values a polymorphic variant may take.
// The first case is an exact variant type: all possible tags are known, with
// their associated types, and they can all be present. Its structure is fully
// known.
// The second case is an open variant type, describing a polymorphic variant
// value: it gives the list of all tags the value could take, with their
// associated types. This type is still compatible with a variant type containing
// more tags. A special case is the unknown type, which does not define any tag,
// and is compatible with any variant type.
// The third case is a closed variant type. It gives information about all the
// possible tags and their associated types, and which tags are known to
// potentially appear in values. The exact variant type (first case) is just an
// abbreviation for a closed variant type where all possible tags are also
// potentially present.
// In all three cases, tags may be either specified directly in the `tag-name
// [of typexpr] form, or indirectly through a type expression, which must expand
// to an exact variant type, whose tag specifications are inserted in its place.
// Full specifications of variant tags are only used for non-exact closed types.
// They can be understood as a conjunctive type for the argument: it is intended
// to have all the types enumerated in the specification.
// Such conjunctive constraints may be unsatisfiable. In such a case the
// corresponding tag may not be used in a value of this type. This does not mean
// that the whole type is not valid: one can still use other available tags.
// Conjunctive constraints are mainly intended as output from the type checker.
// When they are used in source programs, unsolvable constraints may cause early
// failures.

// Object types
// ------------
// 
// An object type < [method-type  { ; method-type }] > is a record of method
// types.
// Each method may have an explicit polymorphic type: { ' ident }^+ .  typexpr.
// Explicit polymorphic variables have a local scope, and an explicit polymorphic
// type can only be unified to an equivalent one, where only the order and names
// of polymorphic variables may change.
// The type < {method-type ;} .. > is the type of an object whose method names
// and types are described by method-type_1, ...,  method-type_n, and possibly
// some other methods represented by the ellipsis. This ellipsis actually is a
// special kind of type variable (called row variable in the literature) that
// stands for any number of extra method types.

// #-types
// -------
// 
// The type # class-path is a special kind of abbreviation. This abbreviation
// unifies with the type of any object belonging to a subclass of class
// class-path. It is handled in a special way as it usually hides a type variable
// (an ellipsis, representing the methods that may be added in a subclass). In
// particular, it vanishes when the ellipsis gets instantiated. Each type
// expression # class-path defines a new type variable, so type # class-path -> #
// class-path is usually not the same as type (# class-path as '  ident) -> '
// ident.
// Use of #-types to abbreviate polymorphic variant types is deprecated. If t is
// an exact variant type then #t translates to [< t], and #t[> `tag_1 ...` tag_k]
// translates to [< t > `tag_1 ...` tag_k]

// Variant and record types
// ------------------------
// 
// There are no type expressions describing (defined) variant types nor record
// types, since those are always named, i.e. defined before use and referred to by
// name. Type definitions are described in section 7.8.1.
// 
