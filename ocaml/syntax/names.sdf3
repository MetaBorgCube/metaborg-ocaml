module names

imports lex module-expressions

// 7.3  Names
// *=*=*=*=*=
// 
// 
// Identifiers are used to give names to several classes of language objects and
// refer to these objects by name later:
// 
// - value names (syntactic class value-name),
// - value constructors and exception constructors (class constr-name),
// - labels (label-name, defined in section 7.1),
// - polymorphic variant tags (tag-name),
// - type constructors (typeconstr-name),
// - record fields (field-name),
// - class names (class-name),
// - method names (method-name),
// - instance variable names (inst-var-name),
// - module names (module-name),
// - module type names (modtype-name).
// These eleven name spaces are distinguished both by the context and by the
// capitalization of the identifier: whether the first letter of the identifier is
// in lowercase (written lowercase-ident below) or in uppercase (written
// capitalized-ident). Underscore is considered a lowercase letter for this
// purpose.

// Naming objects
// --------------

sorts ValueName
lexical syntax
  ValueName = LowercaseIdent
  ValueName = "(" OperatorName ")"
  ValueName = "_" {reject} // overlap with patterns (TODO: check)
  
sorts OperatorName
context-free syntax
  OperatorName.Prefix = PrefixSymbol
  OperatorName.Infix  = InfixOp
  
//  OperatorName60.Infix60 = InfixOp60
//  OperatorName50.Infix50 = InfixOp50
//  OperatorName40.Infix40 = InfixOp40
//  OperatorName30.Infix30 = InfixOp30
//  OperatorName20.Infix20 = InfixOp20
//  OperatorName10.Infix10 = InfixOp10
  
sorts InfixOp
lexical syntax
  InfixOp = InfixSymbol
  InfixOp = "*"
  InfixOp = "+"
  InfixOp = "-"
  InfixOp = "-."
  InfixOp = "="
  InfixOp = "!="
  InfixOp = "<"
  InfixOp = ">"
  InfixOp = "or"
  InfixOp = "||"
  InfixOp = "&"
  InfixOp = "&&"
  InfixOp = ":="
  InfixOp = "mod"
  InfixOp = "land"
  InfixOp = "lor"
  InfixOp = "lxor"
  InfixOp = "lsl"
  InfixOp = "lsr"
  InfixOp = "asr"

lexical syntax // priority levels

  InfixOp60 = InfixSymbol60
   
  InfixOp50 = InfixSymbol50
  InfixOp50 = "lsl"
  InfixOp50 = "lsr"
  InfixOp50 = "asr"
  
  InfixOp40 = InfixSymbol40
  InfixOp40 = "mod"
  InfixOp40 = "land"
  InfixOp40 = "lor"
  InfixOp40 = "lxor"
//  InfixOp40 = "*"
  
  InfixOp30 = InfixSymbol30
//  InfixOp30 = "+"
//  InfixOp30 = "-"
  
  InfixOp20 = InfixSymbol20
  
  InfixOp10 = InfixSymbol10
  InfixOp10 = "!="
//  InfixOp10 = "="
//  InfixOp10 = "<"
//  InfixOp10 = ">"
  
//  InfixOp = "&"
//  InfixOp = "&&"
//  
//  InfixOp = "or"
//  InfixOp = "||"

  InfixOp5 = ":="
  
  
sorts ConstrName
context-free syntax
  ConstrName = CapitalizedIdent
  
sorts TagName TagNameQ
lexical syntax
  TagName          = CapitalizedIdent
  TagNameQ.TagName = "'" TagName
  
sorts TypeconstrName
lexical syntax
  TypeconstrName = LowercaseIdent
  
sorts FieldName
lexical syntax
  FieldName = LowercaseIdent
  
sorts ModuleName
lexical syntax
  ModuleName = CapitalizedIdent
  
sorts ModtypeName
lexical syntax
  ModtypeName = Ident
  
sorts ClassName
lexical syntax
  ClassName = LowercaseIdent
  
sorts InstVarName
lexical syntax
  InstVarName = LowercaseIdent
  
sorts MethodName
lexical syntax
  MethodName = LowercaseIdent
  
 
// Referring to named objects
// --------------------------

sorts ValuePath
context-free syntax
  ValuePath.ValuePath  = ValueName
  ValuePath.ValuePathQ = ModulePathPref ValueName
  
sorts Constr
context-free syntax
  Constr.Constr  = ConstrName
  Constr.ConstrQ = ModulePathPref ConstrName
  
sorts Typeconstr
context-free syntax
  Typeconstr.TypeConstr  =                        TypeconstrName
  Typeconstr.TypeConstrQ = ExtendedModulePathPref TypeconstrName
  
sorts Field
context-free syntax
  Field.Field  = FieldName
  Field.FieldQ = ModulePathPref FieldName
  
sorts ModtypePath
context-free syntax
  ModtypePath.ModtypePath = ExtendedModulePathPref? ModtypeName
  
sorts ClassPath
context-free syntax
  ClassPath.ClassPath = ModulePathPref? ClassName
  
sorts ClasstypePath
context-free syntax
  ClasstypePath.ClasstypePath = ExtendedModulePathPref? ClassName
  
sorts ModulePath
context-free syntax
  ModulePath.ModulePath         = {ModuleName "."}+
  ModulePathPref.ModulePathPref = ModulePath "." // TODO: inline
  
sorts ExtendedModulePath ExtendedModulePathPref ExtendedModulePathArg
context-free syntax
  ExtendedModulePath.ExtendedModulePath = {ExtendedModuleName "."}+
  ExtendedModulePathPref.ExtendedModulePathPref = ExtendedModulePath "."
  
  ExtendedModulePathArg.ExtendedModulePathArg = "(" ExtendedModulePath ")"
  
sorts ExtendedModuleName
context-free syntax
  ExtendedModuleName.ExtendedModuleName = ModuleName ExtendedModulePathArg*
  
  
  
  