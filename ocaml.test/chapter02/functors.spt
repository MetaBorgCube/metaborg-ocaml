module signatures

language ocaml

start symbol CompilationUnit 

test test [[ 
  type comparison = Less | Equal | Greater;;
]] parse succeeds 

test test [[ 
  module type ORDERED_TYPE =
   sig
     type t
     val compare: t -> t -> comparison
   end;;
]] parse succeeds 

test test [[ 
  module Set =
   functor (Elt: ORDERED_TYPE) ->
     struct
       type element = Elt.t
       type set = element list
       let empty = []
       let rec add x s =
         match s with
           [] -> [x]
         | hd::tl ->
            match Elt.compare x hd with
              Equal   -> s         (* x is already in s *)
            | Less    -> x :: s    (* x is smaller than all elements of s *)
            | Greater -> hd :: add x tl
       let rec member x s =
         match s with
           [] -> false
         | hd::tl ->
             match Elt.compare x hd with
               Equal   -> true     (* x belongs to s *)
             | Less    -> false    (* x is smaller than all elements of s *)
             | Greater -> member x tl
     end
]] parse succeeds  

test test [[ 
  module OrderedString =
   struct
     type t = string
     let compare x y = if x = y then Equal else if x < y then Less else Greater
   end
]] parse succeeds   

test test [[ 
  module StringSet = Set(OrderedString)
]] parse succeeds   

test test [[ 
  module StringSet :
  sig
    type element = OrderedString.t
    type set = element list
    val empty : 'a list
    val add : OrderedString.t -> OrderedString.t list -> OrderedString.t list
    val member : OrderedString.t -> OrderedString.t list -> bool
  end
]] parse succeeds   

test test [[ 
  module StringSet = Set(OrderedString)
]] parse succeeds 





