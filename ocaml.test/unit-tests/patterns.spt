module patterns

language ocaml
start symbol Definition

test var pattern [[  
  let xyab
  = 1
]] parse succeeds

test keyword in pattern [[ 
  let for
  = 1
]] parse fails

test var pattern [[ 
  let _ 
  = 1
]] parse succeeds

test constant pattern [[ 
  let 4
  = 1
]] parse succeeds

test alias pattern [[ 
  let 4 as xyz
  = 1
]] parse succeeds
 
test alias pattern [[  
  let Cons(x, xs) as xyz
  = 1
]] parse succeeds

test ascription pattern [[ 
  let (Cons(x, xs) : int list)
  = 1
]] parse succeeds


test or pattern [[ 
  let a | b | c 
  = 1
]] parse succeeds


test tuple pattern [[  
  let a, b, c, d, e 
  = 1
]] parse succeeds

test or / tuple pattern [[  
  let a, b | c, d, e 
  = 1
]] parse to [[
  let (a, b) | (c, d, e) 
  = 1
]]

test or / constructor pattern [[  
  let A b | C d
  = 1 
]] parse to [[
  let (A b) | (C d) 
  = 1 
]]

test or / constructor pattern [[  
  let A b | C d, e 
  = 1 
]] parse to [[
  let (A b) | ((C d), e) 
  = 1 
]]

test constructor / as pattern [[ 
  let Cons a as b | Cons c as d 
  = 1
]] parse to [[
  let ((Cons a) as b | Cons c) as d  
  = 1
]] 

test or / as pattern [[ 
  let a as b | c as d 
  = 1
]] parse to [[
  let ((a as b) | c) as d 
  = 1
]] 

test or / tuple pattern [[ 
  let Cons a as b, Cons c as d  
  = 1
]] parse to [[
  let (((Cons a) as b), Cons c) as d
  = 1
]] 

test as / as pattern [[ 
  let a as b as c
  = 1
]] parse to [[
  let (a as b) as c
  = 1
]] 

test as / tuple pattern [[    
  let a, b as c
  = 1
]] parse to [[
  let (a, b) as c
  = 1
]]

test as / tuple pattern [[     
  let a as c, d 
  = 1
]] parse to [[
  let (a as c), d
  = 1
]] 

test as / tuple pattern [[     
  let a as c, d, e 
  = 1 
]] parse to [[
  let (a as c), d, e
  = 1
]]

test constructor pattern [[  
  let Cons a
  = 1
]] parse succeeds

test constructor pattern [[  
  let Cons a
  = 1
]] parse succeeds

test constructor is uppercase identifier [[  
  let cons a, b, c
  = 1
]] parse succeeds

test constructor pattern [[ 
  let Cons(x, xs)
  = 1
]] parse succeeds

test tuple pattern [[   
  let a, b, c
  = 1
]] parse succeeds

test list pattern [[   
  let []
  = 1
]] parse succeeds

test list pattern [[   
  let [a, b, c; d, e, f; g; 1; 2]
  = 1
]] parse to [[   
  let [(a, b, c); (d, e, f); g; 1; 2]
  = 1
]]

test array pattern [[   
  let [|a, b, c; d, e, f; g; 1; 2|]
  = 1
]] parse to  [[   
  let [|(a, b, c); (d, e, f); g; 1; 2|]
  = 1
]]

test range pattern [[   
  let '1' .. '5'
  = 1
]] parse succeeds

test range pattern [[    
  let Cons 'a' .. 'z', xs
  = 1
]] parse to [[
  let (Cons ('a' .. 'z')), xs 
  = 1
]]

test lazy pattern (this is safe; correct in OCaml?) [[
  let lazy Cons a
  = 1
]] parse fails
 
test lazy pattern  [[    
  let lazy x | exception y
  = 1
]] parse succeeds


test record pattern [[   
  let { hd : int = 1; tl : int list = nil }
  = 1
]] parse succeeds


test record pattern [[   
  let { hd : int = 1; tl : int list = nil; _ } 
  = 1
]] parse succeeds

 