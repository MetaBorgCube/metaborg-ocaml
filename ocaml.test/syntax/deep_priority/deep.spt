module deep 

language ocaml start symbol CompilationUnit

test ifInfix [[ 1 + if 2 then 3 + 4 ;;]] parse succeeds

test dangling else [[ if 1 then if 2 then 3 else if 4 then 5 else 6 ;;]] parse succeeds

test deep1 [[ let x = 1 + if 2 then if 3 then 4 else if 5 then 6 + 5 else 2 + 2  ;; ]] parse succeeds

test deep2 [[ let x = 1 + if 2 then if 3 then 4 else if 5 then 6 + 5 else 2 + 2  ;; ]] parse succeeds

test deep3 [[ let x = 1 + 1 * if 2 then if 3 then 4 else if 5 then 6 + 5 else 2 * 2 + 2  ;;]] parse succeeds

test ifAdd [[ 1 + if 2 then 3 + 4 - 5 ;;]] parse succeeds 

test LetInf [[ 1 - let x = 1 in x + 2 + 3;;]] parse succeeds 

test LetRecInf [[ 1 * let rec x = 1 in x + 2 + 3;;]] parse succeeds 

test NotInf [[ 1 * not 2 + 3;;]] parse succeeds 

test FunctionInf [[ 1 mod function _ -> 3 mod 4;;]] parse succeeds 

test IfInf [[ 1 / if 2 then 3 + 3;;]] parse succeeds 

test IfEInf [[ 1 * if 2 then 2 else 4 + 3;;]] parse succeeds 

test TryInf [[ 1 +. try 2 + 3 with _ -> 3 - 3;;]] parse succeeds 

test FunInf [[ 1 * fun _ -> 2 + 3;;]] parse succeeds 

test FieldUpdate [[ 2 / if 1 then 2.a__b <- 2;;]] parse succeeds 

test XAnd [[ 1 + 2 + fun _ -> 2 && 3;;]] parse succeeds 

test Or [[ 1 or function _ -> 2 or 3;;]] parse succeeds 

test And [[ 1 & try 3 with _ -> 2 & 3;;]] parse succeeds 