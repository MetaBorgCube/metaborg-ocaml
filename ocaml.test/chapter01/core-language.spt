module class-definitions

language ocaml

start symbol Definition

test fib [[
  let rec fib n =
    if n < 2 then n else fib (n - 1) + fib (n - 2)
]] parse succeeds

test sort [[
let rec sort lst =
   match lst with
     [] -> []
   | head :: tail -> insert head (sort tail)
 and insert = fun elt lst ->
   match lst with
     [] -> [elt]
   | head :: tail -> if elt <= head then elt :: lst 
                     else head :: insert elt tail
 ]] parse succeeds
 
test deriv [[
  let deriv f dx = function x -> (f (x +. dx) -. f x) /. dx
]] parse succeeds 
 
test compose [[
  let compose f g = function x -> f (g x)
]] parse succeeds
 
test ratio [[
  type ratio = {num: int; denom: int}
]] parse succeeds
 
test ratio [[ 
  let add_ratio r1 r2 =
   {num = r1.num * r2.denom + r2.num * r1.denom;
    denom = r1.denom * r2.denom}
]] parse succeeds

test test 1 [[ 
  type 'a option = Some of 'a | None
]] parse succeeds

test test 1 [[ 
  let safe_square_root x = if x > 0. then Some(sqrt x) else None
]] parse succeeds

test test 2 [[ 
   type 'a btree = Empty | Node of 'a * 'a btree * 'a btree
]] parse succeeds

test test 2 [[ 
   let rec member x btree =
   match btree with
     Empty -> false
   | Node(y, left, right) ->
       if x = y then true else
       if x < y then member x left else member x right
]] parse succeeds

test test 2 [[ 
   let rec insert x btree =
   match btree with
     Empty -> Node(x, Empty, Empty)
   | Node(y, left, right) ->
       if x <= y then Node(y, insert x left, right)
                 else Node(y, left, insert x right)
]] parse succeeds
