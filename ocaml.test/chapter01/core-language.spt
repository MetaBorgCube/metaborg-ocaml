module class-definitions

language ocaml

start symbol Definition

test fib [[
  let rec fib = fun n -> 
    if n < 2 then n else fib (n - 1) + fib (n - 2)
]] parse succeeds

test sort [[
let rec sort = fun lst ->
   match lst with
     [] -> []
   | head :: tail -> insert head (sort tail)
 and insert = fun elt lst ->
   match lst with
     [] -> [elt]
   | head :: tail -> if elt <= head then elt :: lst 
                     else head :: insert elt tail
 ]] parse succeeds
 
test deriv [[
  let deriv = fun f dx -> function x -> (f (x +. dx) -. f x) /. dx
]] parse succeeds 
 
test compose [[
  let compose = fun f g -> function x -> f (g x)
]] parse succeeds
 
test ratio [[
  type ratio = {num: int; denom: int}
]] parse succeeds
 
test ratio [[ 
  let add_ratio = fun r1 r2 ->
   {num = r1.num * r2.denom + r2.num * r1.denom;
    denom = r1.denom * r2.denom}
]] parse succeeds

