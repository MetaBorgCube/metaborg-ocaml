module PrioQueue =
   struct
     type priority = int
     type 'a queue = Empty | Node of priority * 'a * 'a queue * 'a queue
     let empty = Empty
     let rec insert queue prio elt =
       match queue with
         Empty -> Node(prio, elt, Empty, Empty)
       | Node(p, e, left, right) ->
           if prio <= p
           then Node(prio, elt, insert right p e, left)
           else Node(p, e, insert right prio elt, left)
     exception Queue_is_empty
     let rec remove_top = function
         Empty -> raise Queue_is_empty
       | Node(prio, elt, left, Empty) -> left
       | Node(prio, elt, Empty, right) -> right
       | Node(prio, elt, (Node(lprio, lelt, _, _) as left),
                         (Node(rprio, relt, _, _) as right)) ->
           if lprio <= rprio
           then Node(lprio, lelt, remove_top left, right)
           else Node(rprio, relt, left, remove_top right)
     let extract = function
         Empty -> raise Queue_is_empty
       | Node(prio, elt, _, _) as queue -> (prio, elt, remove_top queue)
   end
 
module PrioQueueOpt =
   struct
     include PrioQueue

     let remove_top_opt x =
       try Some(remove_top x) with Queue_is_empty -> None

     let extract_opt x =
       try Some(extract x) with Queue_is_empty -> None
   end
   
module type PRIOQUEUE =
   sig
     type priority = int         (* still concrete *)
     type 'a queue               (* now abstract *) 
     val empty : 'a queue
     val insert : 'a queue -> int -> 'a -> 'a queue
     val extract : 'a queue -> int * 'a * 'a queue
     exception Queue_is_empty
   end   
   
 module AbstractPrioQueue = (PrioQueue : PRIOQUEUE)
 
 module type PRIOQUEUE_WITH_OPT =
   sig
     include PRIOQUEUE
     val extract_opt : 'a queue -> (int * 'a * 'a queue) option
   end
   
   